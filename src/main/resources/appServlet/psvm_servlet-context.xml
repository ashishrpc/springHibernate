<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
		

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	<!-- Getting Database properties -->
    <context:property-placeholder location="classpath:application.properties" />
	
		<beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
			destroy-method="close">
			<beans:property name="driverClassName" value="${database.driver}" />
			<beans:property name="url" value="${database.url.plicy}" />
			<beans:property name="username" value="${database.user}" />
			<beans:property name="password" value="${database.password}" />
		</beans:bean>
		<!-- Hibernate 4 SessionFactory Bean definition -->
	<beans:bean id="hibernate4AnnotatedSessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="annotatedClasses">
			<beans:list>
				<beans:value>com.arpc.spring.model.Person</beans:value>
				<beans:value>com.arpc.psvm.modelPsvm.Customer</beans:value>
				<beans:value>com.arpc.psvm.modelPsvm.Tran</beans:value>
				<beans:value>com.arpc.psvm.modelPsvm.oneToMany.Cart</beans:value>
				<beans:value>com.arpc.psvm.modelPsvm.oneToMany.Items</beans:value>
				<beans:value>com.arpc.psvm.modelPsvm.manyToMany.CartMtm</beans:value>
				<beans:value>com.arpc.psvm.modelPsvm.manyToMany.ItemsMtm</beans:value>
			</beans:list>
		</beans:property>
		<beans:property name="hibernateProperties">
			<beans:props>
				<beans:prop key="hibernate.dialect">${hibernate.dialect}</beans:prop>
				<beans:prop key="hibernate.show_sql">${hibernate.show_sql}</beans:prop>
				<beans:prop key="hibernate.hbm2ddl.auto">update</beans:prop> <!-- validate, create(if exist drop and then create), update(id exixt no change) or create-drop(will create your tables, and then drop them when you close the sessionFactory.) the database schema on startup -->
<!-- Second level Cache when run public static void main then after completion it will not stop where single level cache terminate-->	 				
				<beans:prop key="hibernate.current_session_context_classl">thread</beans:prop>
				<beans:prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</beans:prop>
				<beans:prop key="hibernate.cache.use_second_level_cache">true</beans:prop>
				<beans:prop key="hibernate.cache.use_query_cache">true</beans:prop>
				<beans:prop key="net.sf.ehcache.configurationResourceName">appServlet/myehcache.xml</beans:prop>
			
<!-- hibernate.cache.region.factory_class is used to define the Factory class for Second level caching, I am using org.hibernate.cache.ehcache.EhCacheRegionFactory for this. If you want the factory class to be singleton, you should use org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory class.
If you are using Hibernate 3, corresponding classes will be net.sf.ehcache.hibernate.EhCacheRegionFactory and net.sf.ehcache.hibernate.SingletonEhCacheRegionFactory.

hibernate.cache.use_second_level_cache is used to enable the second level cache.
hibernate.cache.use_query_cache is used to enable the query cache, without it HQL queries results will not be cached.
net.sf.ehcache.configurationResourceName is used to define the EHCache configuration file location, it’s an optional parameter and if it’s not present EHCache will try to locate ehcache.xml file in the application classpath.
 -->
 <!-- Second level Cache -->
			</beans:props>
		</beans:property>
	</beans:bean>
	
	<beans:bean id="personDAO" class="com.arpc.spring.dao.PersonDAOImpl">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	<beans:bean id="personService" class="com.arpc.spring.service.PersonServiceImpl">
		<beans:property name="personDAO" ref="personDAO"></beans:property>
	</beans:bean>
	<context:component-scan base-package="com.arpc.spring" />
	
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<beans:bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
		
</beans:beans>
		